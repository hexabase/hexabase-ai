#!/bin/bash
# Hexabase AI Debug Environment Setup
# Starts all services in debug mode with enhanced logging

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Configuration
PROJECT_ROOT="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
COMPOSE_PROJECT_NAME="hexabase-debug"

# Function to print colored output
print_info() { echo -e "${BLUE}ℹ ${NC}$1"; }
print_success() { echo -e "${GREEN}✓ ${NC}$1"; }
print_warning() { echo -e "${YELLOW}⚠ ${NC}$1"; }
print_error() { echo -e "${RED}✗ ${NC}$1"; }

# Function to check if port is available
check_port() {
    local port=$1
    if lsof -Pi :$port -sTCP:LISTEN -t >/dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}

# Function to wait for service
wait_for_service() {
    local service=$1
    local port=$2
    local max_attempts=30
    local attempt=0
    
    print_info "Waiting for $service on port $port..."
    while ! nc -z localhost $port >/dev/null 2>&1; do
        attempt=$((attempt+1))
        if [ $attempt -ge $max_attempts ]; then
            print_error "$service failed to start on port $port"
            return 1
        fi
        sleep 2
    done
    print_success "$service is ready on port $port"
}

# Function to get docker compose command
get_docker_compose_cmd() {
    if command -v docker-compose >/dev/null 2>&1; then
        echo "docker-compose"
    elif docker compose version >/dev/null 2>&1; then
        echo "docker compose"
    else
        print_error "Docker Compose not found"
        exit 1
    fi
}

# Main execution
main() {
    print_info "Starting Hexabase AI Debug Environment"
    echo "======================================"
    
    cd "$PROJECT_ROOT"
    
    # Check required ports
    print_info "Checking port availability..."
    PORTS=(
        "5433:PostgreSQL"
        "6380:Redis"
        "4223:NATS"
        "8080:API"
        "3000:UI"
        "2345:API Debugger"
        "2346:Worker Debugger"
        "9229:UI Debugger"
        "16686:Jaeger UI"
        "9090:Prometheus"
        "3001:Grafana"
    )
    
    for port_info in "${PORTS[@]}"; do
        IFS=':' read -r port service <<< "$port_info"
        if ! check_port $port; then
            print_warning "Port $port ($service) is already in use"
            read -p "Continue anyway? (y/N) " -n 1 -r
            echo
            if [[ ! $REPLY =~ ^[Yy]$ ]]; then
                exit 1
            fi
        fi
    done
    
    # Create debug environment file
    print_info "Creating debug environment configuration..."
    cat > "$PROJECT_ROOT/.env.debug" <<EOF
# Debug Environment Configuration
# Generated by dev-debug.sh

# Service Ports
POSTGRES_HOST_PORT=5433
REDIS_HOST_PORT=6380
NATS_HOST_PORT=4223
NATS_MONITOR_PORT=8223
API_HOST_PORT=8080
UI_HOST_PORT=3000

# Debug Ports
API_DEBUG_PORT=2345
WORKER_DEBUG_PORT=2346
UI_DEBUG_PORT=9229

# Monitoring Ports
JAEGER_UI_PORT=16686
JAEGER_COLLECTOR_PORT=14268
PROMETHEUS_PORT=9090
GRAFANA_PORT=3001

# Debug Settings
LOG_LEVEL=debug
DEBUG_SQL=true
DEBUG_HTTP=true
ENABLE_PPROF=true
GIN_MODE=debug

# Development Credentials
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_DB=hexabase
JWT_SECRET=dev-jwt-secret-debug
EOF
    
    print_success "Debug environment configuration created"
    
    # Build debug images
    print_info "Building debug Docker images..."
    DOCKER_COMPOSE_CMD=$(get_docker_compose_cmd)
    $DOCKER_COMPOSE_CMD -f docker-compose.yml -f docker-compose.debug.yml build
    
    # Start services
    print_info "Starting services in debug mode..."
    $DOCKER_COMPOSE_CMD -f docker-compose.yml -f docker-compose.debug.yml --env-file .env.debug up -d
    
    # Wait for services to be ready
    print_info "Waiting for services to start..."
    wait_for_service "PostgreSQL" 5433
    wait_for_service "Redis" 6380
    wait_for_service "NATS" 4223
    wait_for_service "API" 8080
    wait_for_service "UI" 3000
    
    # Show service status
    print_info "Service Status:"
    $DOCKER_COMPOSE_CMD -f docker-compose.yml -f docker-compose.debug.yml ps
    
    # Print debug information
    echo
    print_success "Debug environment is ready!"
    echo
    echo "Service URLs:"
    echo "============="
    echo "• API:        http://localhost:8080"
    echo "• UI:         http://localhost:3000"
    echo "• Jaeger:     http://localhost:16686"
    echo "• Prometheus: http://localhost:9090"
    echo "• Grafana:    http://localhost:3001"
    echo
    echo "Debug Ports:"
    echo "============"
    echo "• API Debugger:    localhost:2345"
    echo "• Worker Debugger: localhost:2346"
    echo "• UI Debugger:     localhost:9229"
    echo
    echo "Database:"
    echo "========="
    echo "• Host: localhost:5433"
    echo "• User: postgres"
    echo "• Pass: postgres"
    echo "• DB:   hexabase"
    echo
    echo "Useful Commands:"
    echo "================"
    echo "• View logs:       $DOCKER_COMPOSE_CMD -f docker-compose.yml -f docker-compose.debug.yml logs -f [service]"
    echo "• Attach to API:   dlv connect localhost:2345"
    echo "• Debug in VSCode: Use 'Debug API (Docker)' launch configuration"
    echo "• Stop services:   $DOCKER_COMPOSE_CMD -f docker-compose.yml -f docker-compose.debug.yml down"
    echo
    echo "VSCode Debugging:"
    echo "================="
    echo "1. Open VSCode in project root"
    echo "2. Go to Run and Debug (Ctrl+Shift+D)"
    echo "3. Select debug configuration:"
    echo "   - 'Debug API (Docker)' for API"
    echo "   - 'Debug UI (Next.js)' for UI"
    echo "   - 'Full Stack Debug' for both"
    echo
    print_info "To view real-time logs, run: make debug-logs"
}

# Run main function
main "$@"