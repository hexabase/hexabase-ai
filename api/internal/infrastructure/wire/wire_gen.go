// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/hexabase/hexabase-kaas/api/internal/api/handlers"
	"github.com/hexabase/hexabase-kaas/api/internal/config"
	authRepo "github.com/hexabase/hexabase-kaas/api/internal/repository/auth"
	billingRepo "github.com/hexabase/hexabase-kaas/api/internal/repository/billing"
	monitoringRepo "github.com/hexabase/hexabase-kaas/api/internal/repository/monitoring"
	orgRepo "github.com/hexabase/hexabase-kaas/api/internal/repository/organization"
	projectRepo "github.com/hexabase/hexabase-kaas/api/internal/repository/project"
	workspaceRepo "github.com/hexabase/hexabase-kaas/api/internal/repository/workspace"
	authSvc "github.com/hexabase/hexabase-kaas/api/internal/service/auth"
	billingSvc "github.com/hexabase/hexabase-kaas/api/internal/service/billing"
	monitoringSvc "github.com/hexabase/hexabase-kaas/api/internal/service/monitoring"
	orgSvc "github.com/hexabase/hexabase-kaas/api/internal/service/organization"
	projectSvc "github.com/hexabase/hexabase-kaas/api/internal/service/project"
	workspaceSvc "github.com/hexabase/hexabase-kaas/api/internal/service/workspace"
	"go.uber.org/zap"
	"gorm.io/gorm"
	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
)

// InitializeApp creates the entire application with all dependencies
func InitializeApp(
	cfg *config.Config,
	db *gorm.DB,
	k8sClient kubernetes.Interface,
	dynamicClient dynamic.Interface,
	k8sConfig *rest.Config,
	logger *zap.Logger,
) (*App, error) {
	// Auth dependencies
	authRepository := authRepo.NewPostgresRepository(db)
	authOAuthRepository := authRepo.NewOAuthRepository(ProvideOAuthConfig(cfg))
	authKeyRepository := authRepo.NewKeyRepository()
	authService := authSvc.NewService(authRepository, authOAuthRepository, authKeyRepository, logger)
	authHandler := handlers.NewAuthHandler(authService, logger)

	// Billing dependencies
	billingRepository := billingRepo.NewPostgresRepository(db)
	apiKey, webhookSecret := ProvideStripeConfig(cfg)
	billingStripeRepository := billingRepo.NewStripeRepository(apiKey, webhookSecret)
	billingService := billingSvc.NewService(billingRepository, billingStripeRepository, logger)
	billingHandler := handlers.NewBillingHandler(billingService, logger)

	// Monitoring dependencies
	monitoringRepository := monitoringRepo.NewPostgresRepository(db)
	monitoringKubernetesRepository := monitoringRepo.NewKubernetesRepository(k8sClient)
	monitoringService := monitoringSvc.NewService(monitoringRepository, monitoringKubernetesRepository, logger)
	monitoringHandler := handlers.NewMonitoringHandler(monitoringService, logger)

	// Organization dependencies
	organizationRepository := orgRepo.NewPostgresRepository(db)
	organizationService := orgSvc.NewService(organizationRepository, authRepository, billingStripeRepository, logger)
	organizationHandler := handlers.NewOrganizationHandler(organizationService, logger)

	// Project dependencies
	projectRepository := projectRepo.NewPostgresRepository(db)
	projectKubernetesRepository := projectRepo.NewKubernetesRepository(k8sClient)
	projectService := projectSvc.NewService(projectRepository, projectKubernetesRepository, logger)
	projectHandler := handlers.NewProjectHandler(projectService, logger)

	// Workspace dependencies
	workspaceRepository := workspaceRepo.NewPostgresRepository(db)
	workspaceKubernetesRepository := workspaceRepo.NewKubernetesRepository(k8sClient, dynamicClient, k8sConfig)
	workspaceAuthAdapter := workspaceRepo.NewAuthRepositoryAdapter(authRepository)
	workspaceService := workspaceSvc.NewService(workspaceRepository, workspaceKubernetesRepository, workspaceAuthAdapter, logger)
	workspaceHandler := handlers.NewWorkspaceHandler(workspaceService, logger)

	// Create app
	app := &App{
		AuthHandler:         authHandler,
		BillingHandler:      billingHandler,
		MonitoringHandler:   monitoringHandler,
		OrganizationHandler: organizationHandler,
		ProjectHandler:      projectHandler,
		WorkspaceHandler:    workspaceHandler,
	}

	return app, nil
}