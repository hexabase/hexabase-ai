package service_test

import (
	"encoding/json"
	"testing"

	"github.com/hexabase/kaas-api/internal/auth"
	"github.com/hexabase/kaas-api/internal/config"
	"github.com/hexabase/kaas-api/internal/db"
	"github.com/hexabase/kaas-api/internal/service"
	"github.com/stretchr/testify/suite"
	"go.uber.org/zap"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

type AuthServiceTestSuite struct {
	suite.Suite
	db          *gorm.DB
	authService *service.AuthService
	config      *config.Config
	logger      *zap.Logger
}

func (suite *AuthServiceTestSuite) SetupSuite() {
	// Setup test database
	dsn := "host=localhost user=postgres password=postgres dbname=hexabase_test port=5433 sslmode=disable"
	database, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		suite.T().Skip("Skipping database tests: database not available")
		return
	}

	// Auto-migrate models
	err = database.AutoMigrate(
		&db.User{},
		&db.Organization{},
		&db.OrganizationUser{},
		&db.Group{},
		&db.Workspace{},
		&db.Project{},
	)
	if err != nil {
		suite.T().Fatal("Failed to migrate database:", err)
	}

	// Create test config
	cfg := &config.Config{
		Auth: config.AuthConfig{
			OIDCIssuer:    "https://api.hexabase.test",
			JWTExpiration: 3600,
			ExternalProviders: map[string]config.OAuthProvider{
				"google": {
					ClientID:     "test-google-client",
					ClientSecret: "test-google-secret",
					RedirectURL:  "https://api.hexabase.test/auth/callback/google",
					Scopes:       []string{"openid", "email", "profile"},
				},
			},
		},
	}

	logger := zap.NewNop()

	// Create auth service
	authService, err := service.NewAuthService(database, cfg, logger)
	suite.Require().NoError(err)

	suite.db = database
	suite.authService = authService
	suite.config = cfg
	suite.logger = logger
}

func (suite *AuthServiceTestSuite) TearDownSuite() {
	// Clean up
	if suite.db != nil {
		sqlDB, _ := suite.db.DB()
		sqlDB.Close()
	}
}

func (suite *AuthServiceTestSuite) SetupTest() {
	// Clean up tables before each test
	suite.cleanupTables()
}

func (suite *AuthServiceTestSuite) cleanupTables() {
	tables := []string{
		"groups",
		"organization_users",
		"organizations",
		"projects",
		"workspaces",
		"users",
	}

	for _, table := range tables {
		suite.db.Exec("DELETE FROM " + table)
	}
}

func (suite *AuthServiceTestSuite) TestGetAuthURL() {
	authURL, state, err := suite.authService.GetAuthURL("google")
	suite.NoError(err)
	suite.NotEmpty(authURL)
	suite.NotEmpty(state)
	suite.Contains(authURL, "accounts.google.com")
	suite.Contains(authURL, "client_id=test-google-client")
}

func (suite *AuthServiceTestSuite) TestGetAuthURL_InvalidProvider() {
	authURL, state, err := suite.authService.GetAuthURL("invalid")
	suite.Error(err)
	suite.Empty(authURL)
	suite.Empty(state)
}

func (suite *AuthServiceTestSuite) TestValidateToken() {
	// This test requires a valid token generated by the token manager
	// Since we can't easily mock the OAuth flow, we'll test token validation
	// with an invalid token
	claims, err := suite.authService.ValidateToken("invalid-token")
	suite.Error(err)
	suite.Nil(claims)
}

func (suite *AuthServiceTestSuite) TestGenerateWorkspaceToken() {
	userID := "test-user-id"
	workspaceID := "ws-test-id"

	token, err := suite.authService.GenerateWorkspaceToken(userID, workspaceID)
	suite.NoError(err)
	suite.NotEmpty(token)
}

func (suite *AuthServiceTestSuite) TestGetJWKS() {
	jwks, err := suite.authService.GetJWKS()
	suite.NoError(err)
	suite.NotEmpty(jwks)

	// Verify it's valid JSON
	var jwksData auth.JWKS
	err = json.Unmarshal(jwks, &jwksData)
	suite.NoError(err)
	suite.Len(jwksData.Keys, 1)
}

func TestAuthServiceTestSuite(t *testing.T) {
	suite.Run(t, new(AuthServiceTestSuite))
}

