// Code generated by ogen, DO NOT EDIT.

package ogen

import (
	"fmt"
	"net/url"

	"github.com/go-faster/errors"
)

func (s *SignUpErrorResponseStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// NewOptSignUpRequest returns new OptSignUpRequest with value set to v.
func NewOptSignUpRequest(v SignUpRequest) OptSignUpRequest {
	return OptSignUpRequest{
		Value: v,
		Set:   true,
	}
}

// OptSignUpRequest is optional SignUpRequest.
type OptSignUpRequest struct {
	Value SignUpRequest
	Set   bool
}

// IsSet returns true if OptSignUpRequest was set.
func (o OptSignUpRequest) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSignUpRequest) Reset() {
	var v SignUpRequest
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSignUpRequest) SetTo(v SignUpRequest) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSignUpRequest) Get() (v SignUpRequest, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSignUpRequest) Or(d SignUpRequest) SignUpRequest {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

type SignUpErrorResponse struct {
	// Detailed error message.
	Error OptString `json:"error"`
}

// GetError returns the value of Error.
func (s *SignUpErrorResponse) GetError() OptString {
	return s.Error
}

// SetError sets the value of Error.
func (s *SignUpErrorResponse) SetError(val OptString) {
	s.Error = val
}

// SignUpErrorResponseStatusCode wraps SignUpErrorResponse with StatusCode.
type SignUpErrorResponseStatusCode struct {
	StatusCode int
	Response   SignUpErrorResponse
}

// GetStatusCode returns the value of StatusCode.
func (s *SignUpErrorResponseStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *SignUpErrorResponseStatusCode) GetResponse() SignUpErrorResponse {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *SignUpErrorResponseStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *SignUpErrorResponseStatusCode) SetResponse(val SignUpErrorResponse) {
	s.Response = val
}

func (*SignUpErrorResponseStatusCode) startAuthSignUpRes() {}

// Ref: #/SignUpRequest
type SignUpRequest struct {
	// OAuth provider to use for authentication.
	Provider SignUpRequestProvider `json:"provider"`
	// Code challenge used in PKCE flow. Generated on the client side.
	CodeChallenge OptString `json:"code_challenge"`
	// Hash algorithm used to generate the code challenge. Currently only 'S256' is supported.
	CodeChallengeMethod OptString `json:"code_challenge_method"`
	// Not used.
	RedirectURL OptURI `json:"redirect_url"`
}

// GetProvider returns the value of Provider.
func (s *SignUpRequest) GetProvider() SignUpRequestProvider {
	return s.Provider
}

// GetCodeChallenge returns the value of CodeChallenge.
func (s *SignUpRequest) GetCodeChallenge() OptString {
	return s.CodeChallenge
}

// GetCodeChallengeMethod returns the value of CodeChallengeMethod.
func (s *SignUpRequest) GetCodeChallengeMethod() OptString {
	return s.CodeChallengeMethod
}

// GetRedirectURL returns the value of RedirectURL.
func (s *SignUpRequest) GetRedirectURL() OptURI {
	return s.RedirectURL
}

// SetProvider sets the value of Provider.
func (s *SignUpRequest) SetProvider(val SignUpRequestProvider) {
	s.Provider = val
}

// SetCodeChallenge sets the value of CodeChallenge.
func (s *SignUpRequest) SetCodeChallenge(val OptString) {
	s.CodeChallenge = val
}

// SetCodeChallengeMethod sets the value of CodeChallengeMethod.
func (s *SignUpRequest) SetCodeChallengeMethod(val OptString) {
	s.CodeChallengeMethod = val
}

// SetRedirectURL sets the value of RedirectURL.
func (s *SignUpRequest) SetRedirectURL(val OptURI) {
	s.RedirectURL = val
}

// OAuth provider to use for authentication.
type SignUpRequestProvider string

const (
	SignUpRequestProviderGoogle SignUpRequestProvider = "google"
	SignUpRequestProviderGithub SignUpRequestProvider = "github"
)

// AllValues returns all SignUpRequestProvider values.
func (SignUpRequestProvider) AllValues() []SignUpRequestProvider {
	return []SignUpRequestProvider{
		SignUpRequestProviderGoogle,
		SignUpRequestProviderGithub,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s SignUpRequestProvider) MarshalText() ([]byte, error) {
	switch s {
	case SignUpRequestProviderGoogle:
		return []byte(s), nil
	case SignUpRequestProviderGithub:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *SignUpRequestProvider) UnmarshalText(data []byte) error {
	switch SignUpRequestProvider(data) {
	case SignUpRequestProviderGoogle:
		*s = SignUpRequestProviderGoogle
		return nil
	case SignUpRequestProviderGithub:
		*s = SignUpRequestProviderGithub
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/SignUpResponse
type SignUpResponse struct {
	// The requested provider name.
	Provider OptString `json:"provider"`
	// URL of the provider's authentication page where the user should be redirected.
	AuthURL OptURI `json:"auth_url"`
	// Random string for CSRF protection. The client must retain this value and verify it during callback.
	State OptString `json:"state"`
}

// GetProvider returns the value of Provider.
func (s *SignUpResponse) GetProvider() OptString {
	return s.Provider
}

// GetAuthURL returns the value of AuthURL.
func (s *SignUpResponse) GetAuthURL() OptURI {
	return s.AuthURL
}

// GetState returns the value of State.
func (s *SignUpResponse) GetState() OptString {
	return s.State
}

// SetProvider sets the value of Provider.
func (s *SignUpResponse) SetProvider(val OptString) {
	s.Provider = val
}

// SetAuthURL sets the value of AuthURL.
func (s *SignUpResponse) SetAuthURL(val OptURI) {
	s.AuthURL = val
}

// SetState sets the value of State.
func (s *SignUpResponse) SetState(val OptString) {
	s.State = val
}

func (*SignUpResponse) startAuthSignUpRes() {}

type StartAuthSignUpProvider string

const (
	StartAuthSignUpProviderGoogle StartAuthSignUpProvider = "google"
	StartAuthSignUpProviderGithub StartAuthSignUpProvider = "github"
)

// AllValues returns all StartAuthSignUpProvider values.
func (StartAuthSignUpProvider) AllValues() []StartAuthSignUpProvider {
	return []StartAuthSignUpProvider{
		StartAuthSignUpProviderGoogle,
		StartAuthSignUpProviderGithub,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s StartAuthSignUpProvider) MarshalText() ([]byte, error) {
	switch s {
	case StartAuthSignUpProviderGoogle:
		return []byte(s), nil
	case StartAuthSignUpProviderGithub:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *StartAuthSignUpProvider) UnmarshalText(data []byte) error {
	switch StartAuthSignUpProvider(data) {
	case StartAuthSignUpProviderGoogle:
		*s = StartAuthSignUpProviderGoogle
		return nil
	case StartAuthSignUpProviderGithub:
		*s = StartAuthSignUpProviderGithub
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}
