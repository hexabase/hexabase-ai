// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"database/sql"
	"github.com/ClickHouse/clickhouse-go/v2"
	"github.com/google/wire"
	"github.com/hexabase/hexabase-ai/api/internal/api/handlers"
	domain2 "github.com/hexabase/hexabase-ai/api/internal/auth/domain"
	"github.com/hexabase/hexabase-ai/api/internal/auth/handler"
	"github.com/hexabase/hexabase-ai/api/internal/auth/repository"
	"github.com/hexabase/hexabase-ai/api/internal/auth/service"
	aiops3 "github.com/hexabase/hexabase-ai/api/internal/domain/aiops"
	application3 "github.com/hexabase/hexabase-ai/api/internal/domain/application"
	backup2 "github.com/hexabase/hexabase-ai/api/internal/domain/backup"
	billing3 "github.com/hexabase/hexabase-ai/api/internal/domain/billing"
	cicd3 "github.com/hexabase/hexabase-ai/api/internal/domain/cicd"
	function3 "github.com/hexabase/hexabase-ai/api/internal/domain/function"
	logs3 "github.com/hexabase/hexabase-ai/api/internal/domain/logs"
	monitoring3 "github.com/hexabase/hexabase-ai/api/internal/domain/monitoring"
	node3 "github.com/hexabase/hexabase-ai/api/internal/domain/node"
	project3 "github.com/hexabase/hexabase-ai/api/internal/domain/project"
	"github.com/hexabase/hexabase-ai/api/internal/helm"
	handler2 "github.com/hexabase/hexabase-ai/api/internal/organization/handler"
	repository3 "github.com/hexabase/hexabase-ai/api/internal/organization/repository"
	service2 "github.com/hexabase/hexabase-ai/api/internal/organization/service"
	"github.com/hexabase/hexabase-ai/api/internal/repository/aiops"
	"github.com/hexabase/hexabase-ai/api/internal/repository/application"
	"github.com/hexabase/hexabase-ai/api/internal/repository/backup"
	"github.com/hexabase/hexabase-ai/api/internal/repository/billing"
	"github.com/hexabase/hexabase-ai/api/internal/repository/cicd"
	"github.com/hexabase/hexabase-ai/api/internal/repository/function"
	kubernetes2 "github.com/hexabase/hexabase-ai/api/internal/repository/kubernetes"
	"github.com/hexabase/hexabase-ai/api/internal/repository/logs"
	"github.com/hexabase/hexabase-ai/api/internal/repository/monitoring"
	"github.com/hexabase/hexabase-ai/api/internal/repository/node"
	"github.com/hexabase/hexabase-ai/api/internal/repository/project"
	"github.com/hexabase/hexabase-ai/api/internal/repository/proxmox"
	aiops2 "github.com/hexabase/hexabase-ai/api/internal/service/aiops"
	application2 "github.com/hexabase/hexabase-ai/api/internal/service/application"
	backup3 "github.com/hexabase/hexabase-ai/api/internal/service/backup"
	billing2 "github.com/hexabase/hexabase-ai/api/internal/service/billing"
	cicd2 "github.com/hexabase/hexabase-ai/api/internal/service/cicd"
	function2 "github.com/hexabase/hexabase-ai/api/internal/service/function"
	logs2 "github.com/hexabase/hexabase-ai/api/internal/service/logs"
	monitoring2 "github.com/hexabase/hexabase-ai/api/internal/service/monitoring"
	node2 "github.com/hexabase/hexabase-ai/api/internal/service/node"
	project2 "github.com/hexabase/hexabase-ai/api/internal/service/project"
	"github.com/hexabase/hexabase-ai/api/internal/shared/config"
	"github.com/hexabase/hexabase-ai/api/internal/workspace/domain"
	handler3 "github.com/hexabase/hexabase-ai/api/internal/workspace/handler"
	repository2 "github.com/hexabase/hexabase-ai/api/internal/workspace/repository"
	service3 "github.com/hexabase/hexabase-ai/api/internal/workspace/service"
	"gorm.io/gorm"
	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/metrics/pkg/client/clientset/versioned"
	"log/slog"
	"net/http"
	"time"
)

// Injectors from wire.go:

func InitializeApp(cfg *config.Config, db *gorm.DB, k8sClient kubernetes.Interface, dynamicClient dynamic.Interface, k8sConfig *rest.Config, logger *slog.Logger) (*App, error) {
	applicationRepository := application.NewPostgresRepository(db)
	versionedInterface, err := ProvideMetricsClientset(k8sConfig)
	if err != nil {
		return nil, err
	}
	kubernetesRepository := application.NewKubernetesRepository(k8sClient, versionedInterface)
	applicationService := application2.NewService(applicationRepository, kubernetesRepository)
	applicationHandler := handlers.NewApplicationHandler(applicationService)
	domainRepository := repository.NewPostgresRepository(db)
	v := ProvideOAuthProviderConfigs(cfg)
	oAuthRepository := repository.NewOAuthRepository(v, logger)
	keyRepository, err := repository.NewKeyRepository()
	if err != nil {
		return nil, err
	}
	domainService := service.NewService(domainRepository, oAuthRepository, keyRepository, logger)
	handlerHandler := handler.NewHandler(domainService, logger)
	backupRepository := backup.NewPostgresRepository(db)
	proxmoxRepository := ProvideBackupProxmoxRepository(cfg)
	repository4 := repository2.NewPostgresRepository(db)
	backupService := ProvideBackupService(backupRepository, proxmoxRepository, applicationRepository, repository4, k8sClient, cfg)
	backupHandler := handlers.NewBackupHandler(backupService)
	billingRepository := billing.NewPostgresRepository(db)
	stripeAPIKey := ProvideStripeAPIKey(cfg)
	stripeWebhookSecret := ProvideStripeWebhookSecret(cfg)
	stripeRepository := ProvideStripeRepository(stripeAPIKey, stripeWebhookSecret)
	billingService := billing2.NewService(billingRepository, stripeRepository, logger)
	billingHandler := handlers.NewBillingHandler(billingService, logger)
	monitoringRepository := monitoring.NewPostgresRepository(db)
	repository5 := kubernetes2.NewKubernetesRepository(k8sClient)
	monitoringService := monitoring2.NewService(monitoringRepository, repository5, logger)
	monitoringHandler := handlers.NewMonitoringHandler(monitoringService, logger)
	postgresRepository := node.NewPostgresRepository(db)
	nodeRepository := ProvideNodeRepository(postgresRepository)
	nodeProxmoxRepository := ProvideProxmoxRepository(cfg)
	proxmoxRepository2 := ProvideProxmoxRepositoryInterface(nodeProxmoxRepository)
	nodeService := node2.NewService(nodeRepository, proxmoxRepository2)
	service4 := ProvideNodeService(nodeService)
	nodeHandler := handlers.NewNodeHandler(service4, logger)
	repository6 := repository3.NewPostgresRepository(db)
	authRepository := repository3.NewAuthRepositoryAdapter(domainRepository)
	domainBillingRepository := repository3.NewBillingRepositoryAdapter(stripeRepository)
	service5 := service2.NewService(repository6, authRepository, domainBillingRepository, logger)
	handler4 := handler2.NewHandler(service5, logger)
	projectRepository := project.NewPostgresRepository(db)
	projectKubernetesRepository := project.NewKubernetesRepository(k8sClient, dynamicClient, k8sConfig)
	projectService := project2.NewService(projectRepository, projectKubernetesRepository, logger)
	projectHandler := handlers.NewProjectHandler(projectService, logger)
	domainKubernetesRepository := repository2.NewKubernetesRepository(k8sClient, dynamicClient, k8sConfig)
	domainAuthRepository := repository2.NewAuthRepositoryAdapter(domainRepository)
	helmService := helm.NewService(k8sConfig, logger)
	service6 := service3.NewService(repository4, domainKubernetesRepository, domainAuthRepository, helmService, logger)
	handler5 := handler3.NewHandler(service6, logger)
	cicdRepository := cicd.NewPostgresRepository(db)
	cicdNamespace := ProvideCICDNamespace()
	providerFactory := ProvideCICDProviderFactory(k8sClient, k8sConfig, cicdNamespace)
	credentialManager := ProvideCICDCredentialManager(k8sClient, cicdNamespace)
	cicdService := cicd2.NewService(cicdRepository, providerFactory, credentialManager, logger)
	cicdHandler := handlers.NewCICDHandler(cicdService, logger)
	sqlDB, err := ProvideSQLDB(db)
	if err != nil {
		return nil, err
	}
	functionPostgresRepository := function.NewPostgresRepository(sqlDB)
	functionRepository := ProvideFunctionRepository(functionPostgresRepository)
	functionProviderFactory := ProvideFunctionProviderFactory(k8sClient, dynamicClient)
	functionService := function2.NewService(functionRepository, functionProviderFactory, logger)
	service7 := ProvideFunctionService(functionService)
	functionHandler := handlers.NewFunctionHandler(service7, logger)
	aiOpsProxyHandler, err := ProvideAIOpsProxyHandler(domainService, logger, cfg)
	if err != nil {
		return nil, err
	}
	conn, err := ProvideClickHouseConnection(cfg)
	if err != nil {
		return nil, err
	}
	logsRepository := logs.NewClickHouseRepository(conn)
	logsService := logs2.NewLogService(logsRepository, logger)
	llmService := ProvideOllamaService(cfg)
	aiopsRepository := aiops.NewPostgresRepository(db)
	aiopsService := aiops2.NewService(llmService, aiopsRepository, logger)
	internalHandler := ProvideInternalHandler(service6, projectService, applicationService, service4, logsService, monitoringService, aiopsService, cicdService, backupService, logger)
	app := NewApp(applicationHandler, handlerHandler, backupHandler, billingHandler, monitoringHandler, nodeHandler, handler4, projectHandler, handler5, cicdHandler, functionHandler, aiOpsProxyHandler, internalHandler)
	return app, nil
}

// wire.go:

var ApplicationSet = wire.NewSet(application.NewPostgresRepository, application.NewKubernetesRepository, application2.NewService, handlers.NewApplicationHandler)

var AuthSet = wire.NewSet(repository.NewPostgresRepository, repository.NewOAuthRepository, repository.NewKeyRepository, service.NewService, handler.NewHandler)

var BackupSet = wire.NewSet(backup.NewPostgresRepository, ProvideBackupProxmoxRepository,
	ProvideBackupService, handlers.NewBackupHandler,
)

var BillingSet = wire.NewSet(billing.NewPostgresRepository, ProvideStripeRepository, billing2.NewService, handlers.NewBillingHandler)

var MonitoringSet = wire.NewSet(monitoring.NewPostgresRepository, kubernetes2.NewKubernetesRepository, monitoring2.NewService, handlers.NewMonitoringHandler)

var NodeSet = wire.NewSet(node.NewPostgresRepository, ProvideNodeRepository, ProvideProxmoxRepository, ProvideProxmoxRepositoryInterface, node2.NewService, ProvideNodeService, handlers.NewNodeHandler)

var OrganizationSet = wire.NewSet(repository3.NewPostgresRepository, repository3.NewAuthRepositoryAdapter, repository3.NewBillingRepositoryAdapter, service2.NewService, handler2.NewHandler)

var ProjectSet = wire.NewSet(project.NewPostgresRepository, project.NewKubernetesRepository, project2.NewService, handlers.NewProjectHandler)

var WorkspaceSet = wire.NewSet(repository2.NewPostgresRepository, repository2.NewKubernetesRepository, repository2.NewAuthRepositoryAdapter, service3.NewService, handler3.NewHandler)

var CICDSet = wire.NewSet(cicd.NewPostgresRepository, ProvideCICDProviderFactory, ProvideCICDCredentialManager, cicd2.NewService, handlers.NewCICDHandler)

var FunctionSet = wire.NewSet(
	ProvideSQLDB, function.NewPostgresRepository, ProvideFunctionRepository,
	ProvideFunctionProviderFactory, function2.NewService, ProvideFunctionService, handlers.NewFunctionHandler,
)

var HelmSet = wire.NewSet(helm.NewService)

var AIOpsProxySet = wire.NewSet(
	ProvideAIOpsProxyHandler,
)

var AIOpsSet = wire.NewSet(aiops.NewPostgresRepository, ProvideOllamaService, aiops2.NewService)

var LogSet = wire.NewSet(ProvideClickHouseConnection, logs.NewClickHouseRepository, logs2.NewLogService)

var InternalSet = wire.NewSet(ProvideInternalHandler)

type App struct {
	ApplicationHandler  *handlers.ApplicationHandler
	AuthHandler         *handler.Handler
	BackupHandler       *handlers.BackupHandler
	BillingHandler      *handlers.BillingHandler
	MonitoringHandler   *handlers.MonitoringHandler
	NodeHandler         *handlers.NodeHandler
	OrganizationHandler *handler2.Handler
	ProjectHandler      *handlers.ProjectHandler
	WorkspaceHandler    *handler3.Handler
	CICDHandler         *handlers.CICDHandler
	FunctionHandler     *handlers.FunctionHandler
	AIOpsProxyHandler   *handlers.AIOpsProxyHandler
	InternalHandler     *handlers.InternalHandler
}

func NewApp(appH *handlers.ApplicationHandler, authH *handler.Handler, backupH *handlers.BackupHandler, billH *handlers.BillingHandler, monH *handlers.MonitoringHandler, nodeH *handlers.NodeHandler, orgH *handler2.Handler, projH *handlers.ProjectHandler, workH *handler3.Handler, cicdH *handlers.CICDHandler, funcH *handlers.FunctionHandler, aiopsH *handlers.AIOpsProxyHandler, internalHandler *handlers.InternalHandler) *App {
	return &App{ApplicationHandler: appH, AuthHandler: authH, BackupHandler: backupH, BillingHandler: billH, MonitoringHandler: monH, NodeHandler: nodeH, OrganizationHandler: orgH, ProjectHandler: projH, WorkspaceHandler: workH, CICDHandler: cicdH, FunctionHandler: funcH, AIOpsProxyHandler: aiopsH, InternalHandler: internalHandler}
}

type StripeAPIKey string

type StripeWebhookSecret string

type AIOpsServiceURL string

type CICDNamespace string

type BackupEncryptionKey string

func ProvideOAuthProviderConfigs(cfg *config.Config) map[string]*repository.ProviderConfig {
	providers := make(map[string]*repository.ProviderConfig)
	if cfg.Auth.ExternalProviders == nil {
		return providers
	}
	for name, p := range cfg.Auth.ExternalProviders {
		providers[name] = &repository.ProviderConfig{
			ClientID:     p.ClientID,
			ClientSecret: p.ClientSecret,
			RedirectURL:  p.RedirectURL,
			Scopes:       p.Scopes,
			AuthURL:      p.AuthURL,
			TokenURL:     p.TokenURL,
		}
	}
	return providers
}

func ProvideStripeAPIKey(cfg *config.Config) StripeAPIKey { return StripeAPIKey(cfg.Stripe.APIKey) }

func ProvideStripeWebhookSecret(cfg *config.Config) StripeWebhookSecret {
	return StripeWebhookSecret(cfg.Stripe.WebhookSecret)
}

func ProvideAIOpsServiceURL(cfg *config.Config) (AIOpsServiceURL, error) {
	if cfg.AIOps.URL != "" {
		return AIOpsServiceURL(cfg.AIOps.URL), nil
	}
	return AIOpsServiceURL("http://ai-ops-service.ai-ops.svc.cluster.local:8000"), nil
}

func ProvideStripeRepository(apiKey StripeAPIKey, webhookSecret StripeWebhookSecret) billing3.StripeRepository {
	return billing.NewStripeRepository(string(apiKey), string(webhookSecret))
}

func ProvideCICDNamespace() CICDNamespace { return CICDNamespace("hexabase-cicd") }

func ProvideCICDProviderFactory(kubeClient kubernetes.Interface, k8sConfig *rest.Config, namespace CICDNamespace) cicd3.ProviderFactory {
	return cicd.NewProviderFactory(kubeClient, k8sConfig, string(namespace))
}

func ProvideCICDCredentialManager(kubeClient kubernetes.Interface, namespace CICDNamespace) cicd3.CredentialManager {
	return cicd.NewKubernetesCredentialManager(kubeClient, string(namespace))
}

func ProvideFunctionProviderFactory(kubeClient kubernetes.Interface, dynamicClient dynamic.Interface) function3.ProviderFactory {
	return function.NewProviderFactory(kubeClient, dynamicClient)
}

func ProvideFunctionService(service4 *function2.Service) function3.Service {
	return service4
}

func ProvideSQLDB(gormDB *gorm.DB) (*sql.DB, error) {
	return gormDB.DB()
}

func ProvideFunctionRepository(repo *function.PostgresRepository) function3.Repository {
	return repo
}

func ProvideClickHouseConnection(cfg *config.Config) (clickhouse.Conn, error) {

	conn, err := clickhouse.Open(&clickhouse.Options{
		Addr: []string{cfg.ClickHouse.Address},
	})
	if err != nil {
		return nil, err
	}
	return conn, nil
}

func ProvideProxmoxRepository(cfg *config.Config) *node.ProxmoxRepository {

	httpClient := &http.Client{
		Timeout: 30 * time.Second,
	}
	return node.NewProxmoxRepository(httpClient, "https://proxmox.example.com/api2/json", "your-api-token")
}

func ProvideMetricsClientset(k8sConfig *rest.Config) (versioned.Interface, error) {
	return versioned.NewForConfig(k8sConfig)
}

func ProvideNodeService(svc *node2.Service) node3.Service {
	return svc
}

func ProvideNodeRepository(repo *node.PostgresRepository) node3.Repository {
	return repo
}

func ProvideProxmoxRepositoryInterface(repo *node.ProxmoxRepository) node3.ProxmoxRepository {
	return repo
}

func ProvideBackupProxmoxRepository(cfg *config.Config) backup2.ProxmoxRepository {

	client := proxmox.NewClient("https://proxmox.example.com/api2/json", "root@pam", "tokenID", "tokenSecret")
	return backup.NewProxmoxRepository(client)
}

func ProvideBackupService(
	repo backup2.Repository,
	proxmoxRepo backup2.ProxmoxRepository,
	appRepo application3.Repository,
	workspaceRepo domain.Repository,
	k8sClient kubernetes.Interface,
	cfg *config.Config,
) backup2.Service {

	encryptionKey := "your-backup-encryption-key"
	return backup3.NewService(repo, proxmoxRepo, appRepo, workspaceRepo, k8sClient, encryptionKey)
}

func ProvideAIOpsProxyHandler(authSvc domain2.Service, logger *slog.Logger, cfg *config.Config) (*handlers.AIOpsProxyHandler, error) {
	var aiopsURL string
	if cfg.AIOps.URL != "" {
		aiopsURL = cfg.AIOps.URL
	} else {
		aiopsURL = "http://ai-ops-service.ai-ops.svc.cluster.local:8000"
	}
	return handlers.NewAIOpsProxyHandler(authSvc, logger, aiopsURL)
}

func ProvideOllamaService(cfg *config.Config) aiops3.LLMService {

	ollamaURL := "http://ollama.ollama.svc.cluster.local:11434"
	timeout := 30 * time.Second
	headers := make(map[string]string)
	return aiops.NewOllamaProvider(ollamaURL, timeout, headers)
}

func ProvideInternalHandler(
	workspaceSvc domain.Service,
	projectSvc project3.Service,
	applicationSvc application3.Service,
	nodeSvc node3.Service,
	logSvc logs3.Service,
	monitoringSvc monitoring3.Service,
	aiopsSvc aiops3.Service,
	cicdSvc cicd3.Service,
	backupSvc backup2.Service,
	logger *slog.Logger,
) *handlers.InternalHandler {
	return handlers.NewInternalHandler(
		workspaceSvc,
		projectSvc,
		applicationSvc,
		nodeSvc,
		logSvc,
		monitoringSvc,
		aiopsSvc,
		cicdSvc,
		backupSvc,
		logger,
	)
}
