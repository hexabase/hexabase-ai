// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"database/sql"
	"github.com/ClickHouse/clickhouse-go/v2"
	"github.com/google/wire"
	"github.com/hexabase/hexabase-ai/api/internal/api/handlers"
	domain4 "github.com/hexabase/hexabase-ai/api/internal/application/domain"
	"github.com/hexabase/hexabase-ai/api/internal/application/handler"
	"github.com/hexabase/hexabase-ai/api/internal/application/repository"
	"github.com/hexabase/hexabase-ai/api/internal/application/service"
	domain6 "github.com/hexabase/hexabase-ai/api/internal/auth/domain"
	handler2 "github.com/hexabase/hexabase-ai/api/internal/auth/handler"
	repository2 "github.com/hexabase/hexabase-ai/api/internal/auth/repository"
	service2 "github.com/hexabase/hexabase-ai/api/internal/auth/service"
	aiops3 "github.com/hexabase/hexabase-ai/api/internal/domain/aiops"
	backup2 "github.com/hexabase/hexabase-ai/api/internal/domain/backup"
	billing3 "github.com/hexabase/hexabase-ai/api/internal/domain/billing"
	cicd3 "github.com/hexabase/hexabase-ai/api/internal/domain/cicd"
	domain2 "github.com/hexabase/hexabase-ai/api/internal/function/domain"
	handler8 "github.com/hexabase/hexabase-ai/api/internal/function/handler"
	repository8 "github.com/hexabase/hexabase-ai/api/internal/function/repository"
	service8 "github.com/hexabase/hexabase-ai/api/internal/function/service"
	"github.com/hexabase/hexabase-ai/api/internal/helm"
	"github.com/hexabase/hexabase-ai/api/internal/logs/domain"
	repository9 "github.com/hexabase/hexabase-ai/api/internal/logs/repository"
	service9 "github.com/hexabase/hexabase-ai/api/internal/logs/service"
	domain8 "github.com/hexabase/hexabase-ai/api/internal/monitoring/domain"
	handler3 "github.com/hexabase/hexabase-ai/api/internal/monitoring/handler"
	repository4 "github.com/hexabase/hexabase-ai/api/internal/monitoring/repository"
	service3 "github.com/hexabase/hexabase-ai/api/internal/monitoring/service"
	domain3 "github.com/hexabase/hexabase-ai/api/internal/node/domain"
	handler4 "github.com/hexabase/hexabase-ai/api/internal/node/handler"
	repository5 "github.com/hexabase/hexabase-ai/api/internal/node/repository"
	service4 "github.com/hexabase/hexabase-ai/api/internal/node/service"
	handler5 "github.com/hexabase/hexabase-ai/api/internal/organization/handler"
	repository6 "github.com/hexabase/hexabase-ai/api/internal/organization/repository"
	service5 "github.com/hexabase/hexabase-ai/api/internal/organization/service"
	domain7 "github.com/hexabase/hexabase-ai/api/internal/project/domain"
	handler6 "github.com/hexabase/hexabase-ai/api/internal/project/handler"
	repository7 "github.com/hexabase/hexabase-ai/api/internal/project/repository"
	service6 "github.com/hexabase/hexabase-ai/api/internal/project/service"
	"github.com/hexabase/hexabase-ai/api/internal/repository/aiops"
	"github.com/hexabase/hexabase-ai/api/internal/repository/backup"
	"github.com/hexabase/hexabase-ai/api/internal/repository/billing"
	"github.com/hexabase/hexabase-ai/api/internal/repository/cicd"
	kubernetes2 "github.com/hexabase/hexabase-ai/api/internal/repository/kubernetes"
	"github.com/hexabase/hexabase-ai/api/internal/repository/proxmox"
	aiops2 "github.com/hexabase/hexabase-ai/api/internal/service/aiops"
	backup3 "github.com/hexabase/hexabase-ai/api/internal/service/backup"
	billing2 "github.com/hexabase/hexabase-ai/api/internal/service/billing"
	cicd2 "github.com/hexabase/hexabase-ai/api/internal/service/cicd"
	"github.com/hexabase/hexabase-ai/api/internal/shared/config"
	domain5 "github.com/hexabase/hexabase-ai/api/internal/workspace/domain"
	handler7 "github.com/hexabase/hexabase-ai/api/internal/workspace/handler"
	repository3 "github.com/hexabase/hexabase-ai/api/internal/workspace/repository"
	service7 "github.com/hexabase/hexabase-ai/api/internal/workspace/service"
	"gorm.io/gorm"
	"k8s.io/client-go/dynamic"
	"k8s.io/client-go/kubernetes"
	"k8s.io/client-go/rest"
	"k8s.io/metrics/pkg/client/clientset/versioned"
	"log/slog"
	"net/http"
	"time"
)

// Injectors from wire.go:

func InitializeApp(cfg *config.Config, db *gorm.DB, k8sClient kubernetes.Interface, dynamicClient dynamic.Interface, k8sConfig *rest.Config, logger *slog.Logger) (*App, error) {
	domainRepository := repository.NewPostgresRepository(db)
	versionedInterface, err := ProvideMetricsClientset(k8sConfig)
	if err != nil {
		return nil, err
	}
	kubernetesRepository := repository.NewKubernetesRepository(k8sClient, versionedInterface)
	domainService := service.NewService(domainRepository, kubernetesRepository)
	applicationHandler := handler.NewApplicationHandler(domainService)
	repository10 := repository2.NewPostgresRepository(db)
	v := ProvideOAuthProviderConfigs(cfg)
	oAuthRepository := repository2.NewOAuthRepository(v, logger)
	keyRepository, err := repository2.NewKeyRepository()
	if err != nil {
		return nil, err
	}
	service10 := service2.NewService(repository10, oAuthRepository, keyRepository, logger)
	handlerHandler := handler2.NewHandler(service10, logger)
	backupRepository := backup.NewPostgresRepository(db)
	proxmoxRepository := ProvideBackupProxmoxRepository(cfg)
	repository11 := repository3.NewPostgresRepository(db)
	backupService := ProvideBackupService(backupRepository, proxmoxRepository, domainRepository, repository11, k8sClient, cfg)
	backupHandler := handlers.NewBackupHandler(backupService)
	billingRepository := billing.NewPostgresRepository(db)
	stripeAPIKey := ProvideStripeAPIKey(cfg)
	stripeWebhookSecret := ProvideStripeWebhookSecret(cfg)
	stripeRepository := ProvideStripeRepository(stripeAPIKey, stripeWebhookSecret)
	billingService := billing2.NewService(billingRepository, stripeRepository, logger)
	billingHandler := handlers.NewBillingHandler(billingService, logger)
	repository12 := repository4.NewPostgresRepository(db)
	repository13 := kubernetes2.NewKubernetesRepository(k8sClient)
	service11 := service3.NewService(repository12, repository13, logger)
	handler9 := handler3.NewHandler(service11, logger)
	postgresRepository := repository5.NewPostgresRepository(db)
	repository14 := ProvideNodeRepository(postgresRepository)
	repositoryProxmoxRepository := ProvideProxmoxRepository(cfg)
	domainProxmoxRepository := ProvideProxmoxRepositoryInterface(repositoryProxmoxRepository)
	serviceService := service4.NewService(repository14, domainProxmoxRepository)
	service12 := ProvideNodeService(serviceService)
	handler10 := handler4.NewHandler(service12, logger)
	repository15 := repository6.NewPostgresRepository(db)
	authRepository := repository6.NewAuthRepositoryAdapter(repository10)
	domainBillingRepository := repository6.NewBillingRepositoryAdapter(stripeRepository)
	service13 := service5.NewService(repository15, authRepository, domainBillingRepository, logger)
	handler11 := handler5.NewHandler(service13, logger)
	repository16 := repository7.NewPostgresRepository(db)
	domainKubernetesRepository := repository7.NewKubernetesRepository(k8sClient, dynamicClient, k8sConfig)
	service14 := service6.NewService(repository16, domainKubernetesRepository, logger)
	handler12 := handler6.NewHandler(service14, logger)
	kubernetesRepository2 := repository3.NewKubernetesRepository(k8sClient, dynamicClient, k8sConfig)
	domainAuthRepository := repository3.NewAuthRepositoryAdapter(repository10)
	helmService := helm.NewService(k8sConfig, logger)
	service15 := service7.NewService(repository11, kubernetesRepository2, domainAuthRepository, helmService, logger)
	handler13 := handler7.NewHandler(service15, logger)
	cicdRepository := cicd.NewPostgresRepository(db)
	cicdNamespace := ProvideCICDNamespace()
	providerFactory := ProvideCICDProviderFactory(k8sClient, k8sConfig, cicdNamespace)
	credentialManager := ProvideCICDCredentialManager(k8sClient, cicdNamespace)
	cicdService := cicd2.NewService(cicdRepository, providerFactory, credentialManager, logger)
	cicdHandler := handlers.NewCICDHandler(cicdService, logger)
	sqlDB, err := ProvideSQLDB(db)
	if err != nil {
		return nil, err
	}
	repositoryPostgresRepository := repository8.NewPostgresRepository(sqlDB)
	repository17 := ProvideFunctionRepository(repositoryPostgresRepository)
	domainProviderFactory := ProvideFunctionProviderFactory(k8sClient, dynamicClient)
	service16 := service8.NewService(repository17, domainProviderFactory, logger)
	service17 := ProvideFunctionService(service16)
	handler14 := handler8.NewHandler(service17, logger)
	aiOpsProxyHandler, err := ProvideAIOpsProxyHandler(service10, logger, cfg)
	if err != nil {
		return nil, err
	}
	conn, err := ProvideClickHouseConn(cfg)
	if err != nil {
		return nil, err
	}
	repository18 := repository9.NewClickHouseRepository(conn, logger)
	service18 := service9.NewLogService(repository18, logger)
	llmService := ProvideOllamaService(cfg)
	aiopsRepository := aiops.NewPostgresRepository(db)
	aiopsService := aiops2.NewService(llmService, aiopsRepository, logger)
	internalHandler := ProvideInternalHandler(service15, service14, domainService, service12, service18, service11, aiopsService, cicdService, backupService, logger)
	app := NewApp(applicationHandler, handlerHandler, backupHandler, billingHandler, handler9, handler10, handler11, handler12, handler13, cicdHandler, handler14, aiOpsProxyHandler, internalHandler, service18)
	return app, nil
}

// wire.go:

// Updated wire sets for migrated packages
var ApplicationSet = wire.NewSet(repository.NewPostgresRepository, repository.NewKubernetesRepository, service.NewService, handler.NewApplicationHandler)

var AuthSet = wire.NewSet(repository2.NewPostgresRepository, repository2.NewOAuthRepository, repository2.NewKeyRepository, service2.NewService, handler2.NewHandler)

var OrganizationSet = wire.NewSet(repository6.NewPostgresRepository, repository6.NewAuthRepositoryAdapter, repository6.NewBillingRepositoryAdapter, service5.NewService, handler5.NewHandler)

var ProjectSet = wire.NewSet(repository7.NewPostgresRepository, repository7.NewKubernetesRepository, service6.NewService, handler6.NewHandler)

var WorkspaceSet = wire.NewSet(repository3.NewPostgresRepository, repository3.NewKubernetesRepository, repository3.NewAuthRepositoryAdapter, service7.NewService, handler7.NewHandler)

// Legacy wire sets for packages that haven't been migrated yet
var BackupSet = wire.NewSet(backup.NewPostgresRepository, ProvideBackupProxmoxRepository,
	ProvideBackupService, handlers.NewBackupHandler,
)

var BillingSet = wire.NewSet(billing.NewPostgresRepository, ProvideStripeRepository, billing2.NewService, handlers.NewBillingHandler)

var MonitoringSet = wire.NewSet(repository4.NewPostgresRepository, kubernetes2.NewKubernetesRepository, service3.NewService, handler3.NewHandler)

var NodeSet = wire.NewSet(repository5.NewPostgresRepository, ProvideNodeRepository,
	ProvideProxmoxRepository,
	ProvideProxmoxRepositoryInterface, service4.NewService, ProvideNodeService, handler4.NewHandler,
)

var CICDSet = wire.NewSet(cicd.NewPostgresRepository, ProvideCICDProviderFactory,
	ProvideCICDCredentialManager, cicd2.NewService, handlers.NewCICDHandler,
)

var FunctionSet = wire.NewSet(
	ProvideSQLDB, repository8.NewPostgresRepository, ProvideFunctionRepository, repository8.NewProviderFactory, ProvideFunctionProviderFactory, service8.NewService, ProvideFunctionService, handler8.NewHandler,
)

var HelmSet = wire.NewSet(helm.NewService)

var AIOpsProxySet = wire.NewSet(
	ProvideAIOpsProxyHandler,
)

var AIOpsSet = wire.NewSet(aiops.NewPostgresRepository, ProvideOllamaService, aiops2.NewService)

var LogSet = wire.NewSet(
	ProvideClickHouseConn, repository9.NewClickHouseRepository, service9.NewLogService,
)

var InternalSet = wire.NewSet(ProvideInternalHandler)

type App struct {
	ApplicationHandler  *handler.ApplicationHandler
	AuthHandler         *handler2.Handler
	BackupHandler       *handlers.BackupHandler
	BillingHandler      *handlers.BillingHandler
	MonitoringHandler   *handler3.Handler
	NodeHandler         *handler4.Handler
	OrganizationHandler *handler5.Handler
	ProjectHandler      *handler6.Handler
	WorkspaceHandler    *handler7.Handler
	CICDHandler         *handlers.CICDHandler
	FunctionHandler     *handler8.Handler
	AIOpsProxyHandler   *handlers.AIOpsProxyHandler
	InternalHandler     *handlers.InternalHandler
	LogSvc              domain.Service
}

func NewApp(
	appH *handler.ApplicationHandler,
	authH *handler2.Handler,
	backupH *handlers.BackupHandler,
	billH *handlers.BillingHandler,
	monH *handler3.Handler,
	nodeH *handler4.Handler,
	orgH *handler5.Handler,
	projH *handler6.Handler,
	workH *handler7.Handler,
	cicdH *handlers.CICDHandler,
	funcH *handler8.Handler,
	aiopsH *handlers.AIOpsProxyHandler,
	internalHandler *handlers.InternalHandler,
	logSvc domain.Service,
) *App {
	return &App{
		ApplicationHandler:  appH,
		AuthHandler:         authH,
		BackupHandler:       backupH,
		BillingHandler:      billH,
		MonitoringHandler:   monH,
		NodeHandler:         nodeH,
		OrganizationHandler: orgH,
		ProjectHandler:      projH,
		WorkspaceHandler:    workH,
		CICDHandler:         cicdH,
		FunctionHandler:     funcH,
		AIOpsProxyHandler:   aiopsH,
		InternalHandler:     internalHandler,
		LogSvc:              logSvc,
	}
}

type StripeAPIKey string

type StripeWebhookSecret string

type AIOpsServiceURL string

type CICDNamespace string

type BackupEncryptionKey string

func ProvideOAuthProviderConfigs(cfg *config.Config) map[string]*repository2.ProviderConfig {
	providers := make(map[string]*repository2.ProviderConfig)
	if cfg.Auth.ExternalProviders == nil {
		return providers
	}
	for name, p := range cfg.Auth.ExternalProviders {
		providers[name] = &repository2.ProviderConfig{
			ClientID:     p.ClientID,
			ClientSecret: p.ClientSecret,
			RedirectURL:  p.RedirectURL,
			Scopes:       p.Scopes,
			AuthURL:      p.AuthURL,
			TokenURL:     p.TokenURL,
		}
	}
	return providers
}

func ProvideStripeAPIKey(cfg *config.Config) StripeAPIKey { return StripeAPIKey(cfg.Stripe.APIKey) }

func ProvideStripeWebhookSecret(cfg *config.Config) StripeWebhookSecret {
	return StripeWebhookSecret(cfg.Stripe.WebhookSecret)
}

func ProvideAIOpsServiceURL(cfg *config.Config) (AIOpsServiceURL, error) {
	if cfg.AIOps.URL != "" {
		return AIOpsServiceURL(cfg.AIOps.URL), nil
	}
	return AIOpsServiceURL("http://ai-ops-service.ai-ops.svc.cluster.local:8000"), nil
}

func ProvideStripeRepository(apiKey StripeAPIKey, webhookSecret StripeWebhookSecret) billing3.StripeRepository {
	return billing.NewStripeRepository(string(apiKey), string(webhookSecret))
}

func ProvideCICDNamespace() CICDNamespace { return CICDNamespace("hexabase-cicd") }

func ProvideCICDProviderFactory(kubeClient kubernetes.Interface, k8sConfig *rest.Config, namespace CICDNamespace) cicd3.ProviderFactory {
	return cicd.NewProviderFactory(kubeClient, k8sConfig, string(namespace))
}

func ProvideCICDCredentialManager(kubeClient kubernetes.Interface, namespace CICDNamespace) cicd3.CredentialManager {
	return cicd.NewKubernetesCredentialManager(kubeClient, string(namespace))
}

func ProvideFunctionProviderFactory(kubeClient kubernetes.Interface, dynamicClient dynamic.Interface) domain2.ProviderFactory {
	return repository8.NewProviderFactory(kubeClient, dynamicClient)
}

func ProvideFunctionService(service10 *service8.Service) domain2.Service {
	return service10
}

func ProvideSQLDB(gormDB *gorm.DB) (*sql.DB, error) {
	return gormDB.DB()
}

func ProvideFunctionRepository(repo *repository8.PostgresRepository) domain2.Repository {
	return repo
}

func ProvideClickHouseConn(cfg *config.Config) (clickhouse.Conn, error) {

	conn, err := clickhouse.Open(&clickhouse.Options{
		Addr: []string{cfg.ClickHouse.Address},
	})
	if err != nil {
		return nil, err
	}
	return conn, nil
}

func ProvideProxmoxRepository(cfg *config.Config) *repository5.ProxmoxRepository {

	httpClient := &http.Client{
		Timeout: 30 * time.Second,
	}
	return repository5.NewProxmoxRepository(httpClient, "https://proxmox.example.com/api2/json", "your-api-token")
}

func ProvideMetricsClientset(k8sConfig *rest.Config) (versioned.Interface, error) {
	return versioned.NewForConfig(k8sConfig)
}

func ProvideNodeService(svc *service4.Service) domain3.Service {
	return svc
}

func ProvideNodeRepository(repo *repository5.PostgresRepository) domain3.Repository {
	return repo
}

func ProvideProxmoxRepositoryInterface(repo *repository5.ProxmoxRepository) domain3.ProxmoxRepository {
	return repo
}

func ProvideBackupProxmoxRepository(cfg *config.Config) backup2.ProxmoxRepository {

	client := proxmox.NewClient("https://proxmox.example.com/api2/json", "root@pam", "tokenID", "tokenSecret")
	return backup.NewProxmoxRepository(client)
}

func ProvideBackupService(
	repo backup2.Repository,
	proxmoxRepo backup2.ProxmoxRepository,
	appRepo domain4.Repository,
	workspaceRepo domain5.Repository,
	k8sClient kubernetes.Interface,
	cfg *config.Config,
) backup2.Service {

	encryptionKey := "your-backup-encryption-key"
	return backup3.NewService(repo, proxmoxRepo, appRepo, workspaceRepo, k8sClient, encryptionKey)
}

func ProvideAIOpsProxyHandler(authSvc domain6.Service, logger *slog.Logger, cfg *config.Config) (*handlers.AIOpsProxyHandler, error) {
	var aiopsURL string
	if cfg.AIOps.URL != "" {
		aiopsURL = cfg.AIOps.URL
	} else {
		aiopsURL = "http://ai-ops-service.ai-ops.svc.cluster.local:8000"
	}
	return handlers.NewAIOpsProxyHandler(authSvc, logger, aiopsURL)
}

func ProvideOllamaService(cfg *config.Config) aiops3.LLMService {

	ollamaURL := "http://ollama.ollama.svc.cluster.local:11434"
	timeout := 30 * time.Second
	headers := make(map[string]string)
	return aiops.NewOllamaProvider(ollamaURL, timeout, headers)
}

func ProvideInternalHandler(
	workspaceSvc domain5.Service,
	projectSvc domain7.Service,
	applicationSvc domain4.Service,
	nodeSvc domain3.Service,
	logSvc domain.Service,
	monitoringSvc domain8.Service,
	aiopsSvc aiops3.Service,
	cicdSvc cicd3.Service,
	backupSvc backup2.Service,
	logger *slog.Logger,
) *handlers.InternalHandler {
	return handlers.NewInternalHandler(
		workspaceSvc,
		projectSvc,
		applicationSvc,
		nodeSvc,
		logSvc,
		monitoringSvc,
		aiopsSvc,
		cicdSvc,
		backupSvc,
		logger,
	)
}
