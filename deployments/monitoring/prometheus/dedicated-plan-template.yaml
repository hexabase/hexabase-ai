# Dedicated Plan Observability Stack Template
# Full Prometheus + Grafana + Loki stack deployed within vCluster

apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-dedicated-config
  namespace: default  # Inside vCluster
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        workspace_id: '${WORKSPACE_ID}'
        tenant: 'dedicated'
        cluster: 'vcluster-${WORKSPACE_ID}'

    rule_files:
      - "alert_rules.yml"
      - "recording_rules.yml"

    alerting:
      alertmanagers:
        - static_configs:
            - targets:
              - alertmanager:9093

    scrape_configs:
      # Scrape Prometheus itself
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']

      # Scrape all pods with prometheus annotations
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - target_label: workspace_id
            replacement: '${WORKSPACE_ID}'

      # Scrape services
      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - target_label: workspace_id
            replacement: '${WORKSPACE_ID}'

      # Scrape API server
      - job_name: 'kubernetes-api'
        kubernetes_sd_configs:
          - role: endpoints
            namespaces:
              names: ['kube-system']
        relabel_configs:
          - source_labels: [__meta_kubernetes_service_name]
            action: keep
            regex: kubernetes
          - target_label: workspace_id
            replacement: '${WORKSPACE_ID}'

      # Scrape nodes (if available in vCluster)
      - job_name: 'kubernetes-nodes'
        kubernetes_sd_configs:
          - role: node
        relabel_configs:
          - target_label: workspace_id
            replacement: '${WORKSPACE_ID}'

  alert_rules.yml: |
    groups:
      - name: workspace.rules
        rules:
          - alert: PodCrashLooping
            expr: rate(kube_pod_container_status_restarts_total[5m]) > 0
            for: 5m
            labels:
              severity: warning
              workspace_id: '${WORKSPACE_ID}'
            annotations:
              summary: "Pod is crash looping"
              description: "Pod {{ $labels.pod }} in namespace {{ $labels.namespace }} is restarting frequently"

          - alert: HighCPUUsage
            expr: sum(rate(container_cpu_usage_seconds_total[5m])) by (pod) > 0.8
            for: 10m
            labels:
              severity: warning
              workspace_id: '${WORKSPACE_ID}'
            annotations:
              summary: "High CPU usage detected"
              description: "Pod {{ $labels.pod }} is using {{ $value | humanizePercentage }} CPU"

          - alert: HighMemoryUsage
            expr: sum(container_memory_usage_bytes) by (pod) / sum(container_spec_memory_limit_bytes) by (pod) > 0.9
            for: 10m
            labels:
              severity: warning
              workspace_id: '${WORKSPACE_ID}'
            annotations:
              summary: "High memory usage detected"
              description: "Pod {{ $labels.pod }} is using {{ $value | humanizePercentage }} of memory limit"

  recording_rules.yml: |
    groups:
      - name: workspace.recording
        rules:
          - record: workspace:cpu_usage_rate
            expr: sum(rate(container_cpu_usage_seconds_total[5m])) by (pod, namespace)

          - record: workspace:memory_usage_bytes
            expr: sum(container_memory_usage_bytes) by (pod, namespace)

          - record: workspace:network_receive_bytes_rate
            expr: sum(rate(container_network_receive_bytes_total[5m])) by (pod, namespace)

          - record: workspace:network_transmit_bytes_rate
            expr: sum(rate(container_network_transmit_bytes_total[5m])) by (pod, namespace)

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: default
  labels:
    app: prometheus
    workspace_id: ${WORKSPACE_ID}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        workspace_id: ${WORKSPACE_ID}
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
          - '--storage.tsdb.retention.time=90d'
          - '--storage.tsdb.retention.size=10GB'
          - '--web.enable-lifecycle'
          - '--web.enable-admin-api'
        ports:
        - name: web
          containerPort: 9090
        volumeMounts:
        - name: config
          mountPath: /etc/prometheus
        - name: storage
          mountPath: /prometheus
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2"
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: 9090
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /-/ready
            port: 9090
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: config
        configMap:
          name: prometheus-dedicated-config
      - name: storage
        persistentVolumeClaim:
          claimName: prometheus-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: default
  labels:
    app: prometheus
    workspace_id: ${WORKSPACE_ID}
spec:
  ports:
  - port: 9090
    targetPort: 9090
    name: web
  selector:
    app: prometheus

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: prometheus-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi

---
# Grafana for dedicated plans
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-config
  namespace: default
data:
  grafana.ini: |
    [server]
    root_url = https://grafana-${WORKSPACE_ID}.${DOMAIN}
    
    [auth]
    disable_login_form = false
    
    [auth.generic_oauth]
    enabled = true
    name = Hexabase SSO
    allow_sign_up = true
    client_id = ${OIDC_CLIENT_ID}
    client_secret = ${OIDC_CLIENT_SECRET}
    scopes = openid profile email groups
    auth_url = ${OIDC_AUTH_URL}
    token_url = ${OIDC_TOKEN_URL}
    api_url = ${OIDC_API_URL}
    role_attribute_path = groups[?@ == 'workspace:${WORKSPACE_ID}:admin'] && 'Admin' || 'Viewer'
    
    [security]
    admin_user = admin
    admin_password = ${GRAFANA_ADMIN_PASSWORD}
    
    [log]
    level = info

  datasources.yml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus:9090
        isDefault: true
        editable: true
      - name: Loki
        type: loki
        access: proxy
        url: http://loki:3100
        editable: true

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: default
  labels:
    app: grafana
    workspace_id: ${WORKSPACE_ID}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
        workspace_id: ${WORKSPACE_ID}
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.1.0
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: config
          mountPath: /etc/grafana
        - name: storage
          mountPath: /var/lib/grafana
        env:
        - name: GF_INSTALL_PLUGINS
          value: "grafana-piechart-panel,grafana-worldmap-panel"
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      volumes:
      - name: config
        configMap:
          name: grafana-config
      - name: storage
        persistentVolumeClaim:
          claimName: grafana-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: default
  labels:
    app: grafana
    workspace_id: ${WORKSPACE_ID}
spec:
  ports:
  - port: 3000
    targetPort: 3000
    name: web
  selector:
    app: grafana

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi

---
# Service accounts and RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: default

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus-${WORKSPACE_ID}
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus-${WORKSPACE_ID}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus-${WORKSPACE_ID}
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: default