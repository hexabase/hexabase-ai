apiVersion: v1
kind: ConfigMap
metadata:
  name: config-network
  namespace: knative-serving
data:
  # Enable automatic TLS
  auto-tls: "Enabled"
  # HTTP protocol for external traffic
  external-domain-tls: "Enabled"
  # Configure HTTP01 challenge type for Let's Encrypt
  http-01-challenge-type: "http01"
  # Certificate class
  certificate-class: "cert-manager.io/cluster-issuer"
  # Default cluster issuer
  default-cluster-issuer: "letsencrypt-prod"

---
# ClusterIssuer for Let's Encrypt Production
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory
    email: admin@hexabase.ai
    privateKeySecretRef:
      name: letsencrypt-prod-key
    solvers:
    - http01:
        ingress:
          class: kourier.ingress.networking.knative.dev

---
# ClusterIssuer for Let's Encrypt Staging (for testing)
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email: admin@hexabase.ai
    privateKeySecretRef:
      name: letsencrypt-staging-key
    solvers:
    - http01:
        ingress:
          class: kourier.ingress.networking.knative.dev

---
# Self-signed ClusterIssuer for development
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: self-signed-issuer
spec:
  selfSigned: {}

---
# Configure Kourier for TLS
apiVersion: v1
kind: ConfigMap
metadata:
  name: kourier-bootstrap
  namespace: kourier-system
data:
  envoy-bootstrap.yaml: |
    admin:
      access_log_path: /tmp/admin_access.log
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901
    static_resources:
      listeners:
      - name: stats
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 9000
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: stats_server
              route_config:
                virtual_hosts:
                - name: admin_interface
                  domains:
                  - "*"
                  routes:
                  - match:
                      prefix: "/stats"
                    route:
                      cluster: service_stats
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      - name: ingress_http
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8080
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              use_remote_address: true
              route_config:
                name: local_route
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      - name: ingress_https
        address:
          socket_address:
            address: 0.0.0.0
            port_value: 8443
        filter_chains:
        - transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_certificate_sds_secret_configs:
                - name: server_cert
                  sds_config:
                    path: /var/lib/envoy/sds.yaml
          filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_https
              use_remote_address: true
              route_config:
                name: local_route
              http_filters:
              - name: envoy.filters.http.router
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.router.v3.Router
      clusters:
      - name: service_stats
        connect_timeout: 0.25s
        type: STATIC
        load_assignment:
          cluster_name: service_stats
          endpoints:
          - lb_endpoints:
            - endpoint:
                address:
                  socket_address:
                    address: 0.0.0.0
                    port_value: 9001

---
# Gateway configuration for HTTPS redirect
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-kourier
  namespace: knative-serving
data:
  # Enable TLS
  enable-tls: "true"
  # Redirect HTTP to HTTPS
  http-redirect: "Enabled"
  # TLS minimum version
  tls-min-version: "1.2"
  # Cipher suites
  tls-cipher-suites: |
    - TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256
    - TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384
    - TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256

---
# Service for HTTPS
apiVersion: v1
kind: Service
metadata:
  name: kourier-https
  namespace: kourier-system
  labels:
    networking.knative.dev/ingress-provider: kourier
spec:
  type: LoadBalancer
  selector:
    app: 3scale-kourier-gateway
  ports:
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP

---
# Certificate for wildcard domain
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: knative-wildcard-cert
  namespace: kourier-system
spec:
  secretName: knative-wildcard-cert
  issuerRef:
    name: letsencrypt-prod
    kind: ClusterIssuer
  dnsNames:
  - "*.knative.hexabase.ai"
  - "*.kn.hexabase.ai"