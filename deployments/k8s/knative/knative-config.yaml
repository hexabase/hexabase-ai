apiVersion: v1
kind: ConfigMap
metadata:
  name: config-features
  namespace: knative-serving
data:
  # Enable multi-container support for functions
  multi-container: "enabled"
  # Enable tag header based routing
  tag-header-based-routing: "enabled"
  # Enable responsive garbage collection
  responsive-gc: "enabled"
  # Enable queue proxy resource limits
  queueproxy.resource-defaults: "enabled"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-defaults
  namespace: knative-serving
data:
  # Default revision timeout
  revision-timeout-seconds: "300"
  # Maximum request body size (10MB)
  max-revision-request-body-size: "10485760"
  # Default container concurrency
  container-concurrency: "100"
  # Allow zero initial scale (true serverless)
  allow-zero-initial-scale: "true"
  # Enable scale to zero
  enable-scale-to-zero: "true"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-autoscaler
  namespace: knative-serving
data:
  # Minimum scale
  min-scale: "0"
  # Maximum scale
  max-scale: "100"
  # Initial scale
  initial-scale: "1"
  # Scale down delay
  scale-down-delay: "30s"
  # Stable window for autoscaling decisions
  stable-window: "60s"
  # Panic window percentage
  panic-window-percentage: "10.0"
  # Panic threshold percentage
  panic-threshold-percentage: "200.0"
  # Container concurrency target percentage
  container-concurrency-target-percentage: "70"
  # Requests per second target
  requests-per-second-target-default: "200"
  # Target burst capacity
  target-burst-capacity: "200"
  # Activator capacity
  activator-capacity: "100"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-deployment
  namespace: knative-serving
data:
  # Queue sidecar image
  queue-sidecar-image: gcr.io/knative-releases/knative.dev/serving/cmd/queue:v1.13.0
  # Progress deadline
  progress-deadline: "600s"
  # Digest resolution timeout
  digest-resolution-timeout: "10s"
  # Registry certificate verification
  skip-registry-tls-verify: "false"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-gc
  namespace: knative-serving
data:
  # Garbage collection settings
  retain-since-create-time: "24h"
  retain-since-last-active-time: "24h"
  min-non-active-revisions: "1"
  max-non-active-revisions: "10"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: config-tracing
  namespace: knative-serving
data:
  # Enable distributed tracing
  backend: "zipkin"
  zipkin-endpoint: "http://zipkin.istio-system.svc.cluster.local:9411/api/v2/spans"
  sample-rate: "0.1"

---
# NetworkPolicy for tenant isolation
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: knative-serving-webhook
  namespace: knative-serving
spec:
  podSelector:
    matchLabels:
      app: webhook
  policyTypes:
  - Ingress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          serving.knative.dev/release: "v1.13.0"
    - podSelector: {}
    ports:
    - protocol: TCP
      port: 9090
    - protocol: TCP
      port: 8443

---
# Resource quotas for Knative system namespaces
apiVersion: v1
kind: ResourceQuota
metadata:
  name: knative-serving-quota
  namespace: knative-serving
spec:
  hard:
    requests.cpu: "10"
    requests.memory: "20Gi"
    limits.cpu: "20"
    limits.memory: "40Gi"
    persistentvolumeclaims: "10"

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: knative-eventing-quota
  namespace: knative-eventing
spec:
  hard:
    requests.cpu: "5"
    requests.memory: "10Gi"
    limits.cpu: "10"
    limits.memory: "20Gi"
    persistentvolumeclaims: "10"

---
# HPA for Knative activator
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: activator-hpa
  namespace: knative-serving
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: activator
  minReplicas: 2
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

---
# Service Monitor for Prometheus integration
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: knative-serving-metrics
  namespace: knative-serving
spec:
  selector:
    matchLabels:
      serving.knative.dev/release: "v1.13.0"
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics