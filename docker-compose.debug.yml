# Docker Compose Debug Configuration
# Extends the base docker-compose.yml with debugging features
# Usage: docker compose -f docker-compose.yml -f docker-compose.debug.yml up

services:
  # Database with query logging
  postgres:
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-hexabase}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # Enable query logging
      POSTGRES_INITDB_ARGS: "-c log_statement=all -c log_duration=on"
    command: 
      - "postgres"
      - "-c"
      - "log_statement=all"
      - "-c"
      - "log_duration=on"
      - "-c"
      - "log_connections=on"
      - "-c"
      - "log_disconnections=on"
      - "-c"
      - "log_line_prefix=%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h "
      - "-c"
      - "log_min_duration_statement=100"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER:-postgres} -d $${POSTGRES_DB:-hexabase}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis with verbose logging
  redis:
    command: ["redis-server", "--loglevel", "debug"]
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - hexabase

  # NATS with debug logging
  nats:
    command: ["--jetstream", "--store_dir=/data", "-DV"]
    environment:
      DEBUG: "true"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Server with debugging
  api:
    build:
      context: ./api
      dockerfile: Dockerfile.debug
      target: debug
    ports:
      - "${API_HOST_PORT:-8080}:8080"
      - "${API_DEBUG_PORT:-2345}:2345"  # Delve debugger port
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_DBNAME=hexabase
      - DATABASE_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_URL=nats://nats:4222
      - AUTH_JWT_SECRET=dev-jwt-secret-change-in-production
      - STRIPE_SECRET_KEY=sk_test_your_key_here
      - STRIPE_WEBHOOK_SECRET=whsec_your_webhook_secret
      - GIN_MODE=debug
      - LOG_LEVEL=debug
      - LOG_FORMAT=text
      - DEBUG_SQL=true
      - DEBUG_HTTP=true
      - ENABLE_PPROF=true
    volumes:
      - ./api:/app:cached
      - api-cache:/go/pkg/mod
    command: 
      - "dlv"
      - "debug"
      - "--headless"
      - "--listen=:2345"
      - "--api-version=2"
      - "--accept-multiclient"
      - "--continue"
      - "./cmd/api/main.go"
    security_opt:
      - "seccomp:unconfined"
      - "apparmor:unconfined"
    cap_add:
      - SYS_PTRACE
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # UI development server with debugging
  ui:
    build:
      context: ./ui
      dockerfile: Dockerfile.dev
    ports:
      - "${UI_HOST_PORT:-3000}:3000"
      - "${UI_DEBUG_PORT:-9229}:9229"  # Node.js debugger port
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:${API_HOST_PORT:-8080}
      - NEXT_PUBLIC_WS_URL=ws://localhost:${API_HOST_PORT:-8080}
      - NODE_OPTIONS=--inspect=0.0.0.0:9229
      - DEBUG=*
    volumes:
      - ./ui:/app:cached
      - /app/node_modules
      - /app/.next
    command: ["npm", "run", "dev"]
    depends_on:
      - api
    networks:
      - hexabase
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Worker with debugging
  worker:
    build:
      context: ./api
      dockerfile: Dockerfile.debug
      target: debug
    ports:
      - "${WORKER_DEBUG_PORT:-2346}:2346"  # Separate debug port for worker
    command: 
      - "dlv"
      - "debug"
      - "--headless"
      - "--listen=:2346"
      - "--api-version=2"
      - "--accept-multiclient"
      - "--continue"
      - "./cmd/worker/main.go"
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=postgres
      - DATABASE_DBNAME=hexabase
      - DATABASE_SSLMODE=disable
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - NATS_URL=nats://nats:4222
      - AUTH_JWT_SECRET=dev-jwt-secret-change-in-production
      - LOG_LEVEL=debug
      - DEBUG_SQL=true
    volumes:
      - ./api:/app:cached
      - api-cache:/go/pkg/mod
    security_opt:
      - "seccomp:unconfined"
      - "apparmor:unconfined"
    cap_add:
      - SYS_PTRACE
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "${JAEGER_UI_PORT:-16686}:16686"
      - "${JAEGER_COLLECTOR_PORT:-14268}:14268"
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    networks:
      - hexabase

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - hexabase

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - hexabase

  migrate:
    image: migrate/migrate:4
    profiles:
      - tools
    volumes:
      - ./api/internal/shared/db/migrations:/migrations
    command: ["-path", "/migrations", "-database", "postgres://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-hexabase}?sslmode=disable", "up"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - hexabase

volumes:
  api-cache:
  prometheus_data:
  grafana_data: